        
        # input data parameters
        
        param.inputs = {}
        param.inputs['fields'] = {}
        param.inputs['units'] = {}

        # fnspec - parameter extension to file name specification

        param.inputs['fnspec'] = {}
        param.inputs['wsspec'] = {}
        param.inputs['ws'] = read_param('inputs_folder', paths.input_ws, str, config)
        
        param.inputs['file_type'] = read_param('file_type', 'csv', str, config).lower()
        param.inputs['data_structure_type'] = read_param('data_structure_type', 'SF P', str, config).upper()
        param.inputs['name_format'] = read_param('name_format', '%s.csv', str, config)
        param.inputs['header_lines'] = read_param('header_lines', 2, int, config)
        param.inputs['names_line'] = read_param('names_line', 2, int, config)
        param.inputs['delimiter'] = read_param('delimiter', ',', str, config).lower()
        if param.inputs['delimiter'] not in [' ', ',', '\\t']: param.inputs['delimiter'] = ','
        if "\\" in param.inputs['delimiter'] and "t" in param.inputs['delimiter']:
            param.inputs['delimiter'] = param.inputs['delimiter'].replace('\\t', '\t')

        # Date can be read directly or computed from year, month, and day        
        
        param.inputs['fields']['date'] = read_param)'date_field', None, str, config)
        param.inputs['fields']['year'] = read_param)'year_field', None, str, config)
        param.inputs['fields']['month'] = read_param)'month_field', None, str, config)
        param.inputs['fields']['day'] = read_param)'day_field', None, str, config)
        if param.inputs['fields']['date'] is not None:
            logging.info('  INMET: Reading date from date column')
        elif (param.inputs['fields']['year'] is not None and
              param.inputs['fields']['month'] is not None and
              param.inputs['fields']['day'] is not None):
            logging.info('  INMET: Reading date from year, month, and day columns')
        else:
            logging.error('  ERROR: INPUTS date_field (or year, month, and '+
                          'day fields) must be set in  INI')
            sys.exit()

        # required parameters
                    
        # optional parameters
                
        if RDM == 2:
            # reservoir depth specifications
                
            param.inputs['fields']['rd'] = read_param('rd_field', None, str, config)
            if param.inputs['fields']['rd'] is None or param.inputs['fields']['rd'] == 'None':
                param.inputs['fields']['rd'] = 'RD'
                param.inputs['fnspec']['rd'] = 'Unused'
            else:
                param.inputs['fnspec']['rd'] = read_param('rd_name', None, str, config)
                if param.inputs['fnspec']['rd'] is None or param.inputs['fnspec']['rd'] == 'None': 
                    param.inputs['fnspec']['rd'] = 'RD'
                if param.inputs['file_type'] == 'xls' or param.inputs['file_type'] == 'wb':
                    param.inputs['wsspec']['rd'] = read_param('rd_ws', None, str, config)
                    if param.inputs['wsspec']['rd'] is None or param.inputs['wsspec']['rd'] == 'None':
                        logging.info('  INFO:  INMET: reservoir depth worksheet name set to RD')
                        param.inputs['wsspec']['rd'] = 'RD'
        else::
            param.inputs['fields']['rd'] = 'RD'
            param.inputs['fnspec']['rd'] = 'Unused'
        param.inputs['units']['rd'] = RDU
	